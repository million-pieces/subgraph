##  ----------------------
##  ARTWORK
##  ----------------------

type Artwork @entity {
  id: ID!

  name: String!
  soldSegments: [Token!]
  tokens: [Token!]

  soldSimpleSegmentsCount: BigInt!
  soldSpecialSegmentsCount: BigInt!
  soldSegmentsCount: BigInt! # Minted for ETH, not for giveaway like soldSimpleSegmentsCount
  claimablePiece: BigInt!
  countries: [Country!]
}

type Country @entity {
  id: ID!

  name: String!
  availableSegments: BigInt!
  totalSegments: BigInt!
}

##  ----------------------
##  USER + SEGMENT
##  ----------------------

type User @entity {
  id: ID! # address of user

  claimablePiece: BigInt!
  tokens: [Token!]! @derivedFrom(field: "owner")
  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")
}

type Purchase @entity {
  id: ID!

  token: Token!
  buyer: User!
  initiator: String! # Address who initialized the purchase transaction (can be admin or another address)
  paidAmount: BigInt!
  claimedPiece: BigInt!

  transaction: Transaction!
}

##  ----------------------
##  NFT
##  ----------------------

interface Event {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  value: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Transfer implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  token: Token!
  from: User!
  to: User!
}

type Token @entity {
  id: ID!
  identifier: BigInt! # Token ID
  claimablePiece: BigInt! # PIECE amount which token holds
  saleOrder: BigInt!
  coordinate: String!

  isBigSegment: Boolean!
  owner: User!
  uri: String
  transfers: [Transfer!]! @derivedFrom(field: "token")
}
